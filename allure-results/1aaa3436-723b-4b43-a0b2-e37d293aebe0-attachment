# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Downloading Images
- Location: C:\Users\likhithap\WebstormProjects\PlaywrightAutomation\tests\DownloadingFiles\DownloadFiles.spec.js:16:1

# Error details

```
Error: page.waitForEvent: Test ended.
=========================== logs ===========================
waiting for event "download"
============================================================
    at C:\Users\likhithap\WebstormProjects\PlaywrightAutomation\tests\DownloadingFiles\DownloadFiles.spec.js:34:30
```

# Page snapshot

```yaml
- navigation:
  - link "File Examples"
  - list:
    - listitem:
      - link "Sample videos"
    - listitem:
      - link "Sample audio files"
    - listitem:
      - link "Sample documents"
    - listitem:
      - link "Sample images"
    - listitem:
      - link "Other files"
- main:
  - heading "Sample images download" [level=2]
  - paragraph
  - paragraph: Sample images download for testing and demo purpose. All might be useful if you need dummy files when developing file upload, image auto scalling etc.
  - paragraph
  - insertion
  - separator
  - text: "Search:"
  - searchbox "Search:"
  - grid:
    - rowgroup:
      - row:
        - gridcell
        - gridcell
        - gridcell
    - rowgroup:
      - row "JPG JPEG (Joint Photographic Experts Group) Select file size & download":
        - gridcell "JPG"
        - gridcell "JPEG (Joint Photographic Experts Group)"
        - gridcell "Select file size & download":
          - link "Select file size & download"
      - row "PNG Portable Network Graphics Select file size & download":
        - gridcell "PNG"
        - gridcell "Portable Network Graphics"
        - gridcell "Select file size & download":
          - link "Select file size & download"
      - row "GIF Graphics Interchange Format Select file size & download":
        - gridcell "GIF"
        - gridcell "Graphics Interchange Format"
        - gridcell "Select file size & download":
          - link "Select file size & download"
      - row "TIFF Tag Image File Format Select file size & download":
        - gridcell "TIFF"
        - gridcell "Tag Image File Format"
        - gridcell "Select file size & download":
          - link "Select file size & download"
      - row "ICO ICO FILE Select file size & download":
        - gridcell "ICO"
        - gridcell "ICO FILE"
        - gridcell "Select file size & download":
          - link "Select file size & download"
      - row "SVG Scalable Vector Graphics Select file size & download":
        - gridcell "SVG"
        - gridcell "Scalable Vector Graphics"
        - gridcell "Select file size & download":
          - link "Select file size & download"
      - row "WEBP WEB PICTURE Select file size & download":
        - gridcell "WEBP"
        - gridcell "WEB PICTURE"
        - gridcell "Select file size & download":
          - link "Select file size & download"
  - status: Showing 1 to 7 of 7 entries
  - insertion
- insertion
- contentinfo:
  - paragraph: Â© 2019-2024 file-examples.com | All Rights Reserved.
  - paragraph:
    - link "hello@file-examples.com"
  - list:
    - listitem:
      - link "Sample videos"
    - listitem:
      - link "Sample audio files"
    - listitem:
      - link "Sample documents"
    - listitem:
      - link "Sample images"
    - listitem:
      - link "Other files"
- insertion
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 |
   3 | test('Downloading files', async ({ page }) => {
   4 |   await page.goto('https://commitquality.com/practice-file-download');
   5 |
   6 |   let waitForDownloadEvent = page.waitForEvent('download')
   7 |
   8 |   await page.locator("//button[normalize-space()='Download File']").click();
   9 |   await page.waitForTimeout(2000)
  10 |   const download = await waitForDownloadEvent;
  11 |
  12 |   await download.saveAs("./"+download.suggestedFilename());
  13 |
  14 | });
  15 |
  16 | test("Downloading Images", async ({ page }) => {
  17 |   await page.goto('https://file-examples.com/#google_vignette');
  18 |   await page.setViewportSize({ width: 1920, height: 1040 });
  19 |
  20 |   const sections = await page.locator("div.feature-item").all();
  21 |
  22 |   console.log("Total sections:", sections.length);
  23 |   await page.locator("//h3[normalize-space()='Other files']").scrollIntoViewIfNeeded();
  24 |
  25 |   for (const section of sections) {
  26 |     const fileTitle = await section.locator("h3").textContent();
  27 |
  28 |     if (fileTitle.includes("Images")) {
  29 |       await section.locator("a:has-text('Browse')").click();
  30 |       break;
  31 |     }
  32 |   }
  33 |
> 34 |   let waitForDownload = page.waitForEvent('download')
     |                              ^ Error: page.waitForEvent: Test ended.
  35 |   // await page.$$("//a[@href='https://file-examples.com/index.php/sample-images-download/sample-jpg-download/']").click();
  36 |
  37 |   const downloads = await page.locator("//a[contains(@href, 'sample-images-download')]").all();
  38 |   console.log("Total download buttons found:", downloads.length);
  39 |   await page.waitForTimeout(2000)
  40 |   await downloads[0].click();
  41 |   await page.waitForTimeout(2000)
  42 |
  43 |
  44 |   const download = await waitForDownload;
  45 |   await download.saveAs("./DownloadedFiles"+ download.suggestedFilename());
  46 | })
```