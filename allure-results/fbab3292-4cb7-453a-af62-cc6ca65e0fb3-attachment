# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Handling Tables
- Location: C:\Users\likhithap\WebstormProjects\PlaywrightAutomation\tests\WebTables\HandlingTables.spec.js:3:1

# Error details

```
Error: locator.check: Target page, context or browser has been closed
Call log:
  - waiting for locator('#productTable').locator('tbody tr').filter({ hasText: 'Television' }).filter({ has: locator('td') }).locator('input')

    at C:\Users\likhithap\WebstormProjects\PlaywrightAutomation\tests\WebTables\HandlingTables.spec.js:25:39
```

# Test source

```ts
   1 | import {test, expect} from "@playwright/test";
   2 |
   3 | test('Handling Tables', async ({page})=>{
   4 |     await page.goto('https://testautomationpractice.blogspot.com/')
   5 |     await page.setViewportSize({ width: 1920, height: 1040 });
   6 |     await page.waitForTimeout(2000);
   7 |
   8 |     //capture the table
   9 |     const table = await page.locator('#productTable');
  10 |
  11 |     //total number of Rows and Columns
  12 |     const columns = await table.locator('thead tr th')
  13 |     console.log("Total Columns : ", await columns.count());
  14 |     expect(await columns.count()).toBe(4)
  15 |
  16 |     const rows = await table.locator('tbody tr')
  17 |     console.log("Total Rows : ", await rows.count());
  18 |     expect(await rows.count()).toBe(5)
  19 |
  20 |     //select the checkbox of product-5 - use filter function
  21 |      const matchedRow = rows.filter({
  22 |         has : page.locator('td'),
  23 |         hasText : 'Television'
  24 |     })
> 25 |     await matchedRow.locator('input').check()
     |                                       ^ Error: locator.check: Target page, context or browser has been closed
  26 |     await page.waitForTimeout(5000)
  27 |    //
  28 |    //  await selectProduct(rows, page, 'Laptop')
  29 |    //  await selectProduct(rows, page, 'Tablet ')
  30 |    //  await selectProduct(rows, page, 'Smartwatch')
  31 |    //
  32 |    //  //select multiple products by reusable function
  33 |    // async function selectProduct(rows, page, name){
  34 |    //      const matchedRow = rows.filter({
  35 |    //          has : page.locator('td'),
  36 |    //          hasText : name
  37 |    //      });
  38 |    //      await matchedRow.locator('input').check()
  39 |    //  }
  40 |    //  await page.waitForTimeout(5000)
  41 |
  42 | })
  43 |
```